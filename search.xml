<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[va_start和va_end使用详解]]></title>
    <url>%2F2018%2F06%2F01%2Fva_start%E5%92%8Cva_end%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[前言1.在C中，当我们无法列出传递函数的所有实参的类型和数目时,可以用省略号指定参数表 void foo(…);void foo(parm_list,…);这种方式和我们以前认识的不大一样，但我们要记住这是C中一种传参的形式，在后面我们就会用到它。 2.函数参数的传递原理 函数参数是以数据结构:栈的形式存取,从右至左入栈。 首先是参数的内存存放格式：参数存放在内存的堆栈段中，在执行函数的时候，从最后一个开始入栈。因此栈底高地址，栈顶低地址，举个例子如下：void func(int x, float y, char z); 那么，调用函数的时候，实参 char z 先进栈，然后是 float y，最后是 int x，因此在内存中变量的存放次序是 x-&gt;y-&gt;z，因此，从理论上说，我们只要探测到任意一个变量的地址，并且知道其他变量的类型，通过指针移位运算，则总可以顺藤摸瓜找到其他的输入变量。 下面是 &lt;stdarg.h&gt; 里面重要的几个宏定义如下：typedef char va_list;void va_start ( va_list ap, prev_param ); / ANSI version */type va_arg ( va_list ap, type );void va_end ( va_list ap );va_list 是一个字符指针，可以理解为指向当前参数的一个指针，取参必须通过这个指针进行。 在调用参数表之前，定义一个 va_list 类型的变量，(假设va_list 类型变量被定义为ap)； 然后应该对ap 进行初始化，让它指向可变参数表里面的第一个参数，这是通过 va_start 来实现的，第一个参数是 ap 本身，第二个参数是在变参表前面紧挨着的一个变量,即“…”之前的那个参数； 然后是获取参数，调用va_arg，它的第一个参数是ap，第二个参数是要获取的参数的指定类型，然后返回这个指定类型的值，并且把 ap 的位置指向变参表的下一个变量位置； 获取所有的参数之后，我们有必要将这个 ap 指针关掉，以免发生危险，方法是调用 va_end，他是输入的参数 ap 置为 NULL，应该养成获取完参数表之后关闭指针的习惯。说白了，就是让我们的程序具有健壮性。通常va_start和va_end是成对出现。 example123456789101112131415161718192021222324#include &lt;iostream.h&gt; void fun(int a, ...) &#123; int *temp = &amp;a; temp++; for (int i = 0; i &lt; a; ++i) &#123; cout &lt;&lt; *temp &lt;&lt; endl; temp++; &#125; &#125;int main() &#123; int a = 1; int b = 2; int c = 3; int d = 4; fun(4, a, b, c, d); system("pause"); return 0; &#125; Output:: 1 2 3 4 3:获取省略号指定的参数 在函数体中声明一个va_list，然后用va_start函数来获取参数列表中的参数，使用完毕后调用va_end()结束。像这段代码： 12345678910111213141516171819202122232425262728293031323334353637void TestFun(char* pszDest, int DestLen, const char* pszFormat, ...) &#123; va_list args; va_start(args, pszFormat); //一定要“...”之前的那个参数_vsnprintf(pszDest, DestLen, pszFormat, args); va_end(args); &#125; 4.演示如何使用参数个数可变的函数，采用ANSI标准形式 #include 〈stdio.h〉 #include 〈string.h〉 #include 〈stdarg.h〉 /*函数原型声明，至少需要一个确定的参数，注意括号内的省略号*/ int demo( char, ... ); void main( void ) &#123; demo("DEMO", "This", "is", "a", "demo!", ""); &#125; /*ANSI标准形式的声明方式，括号内的省略号表示可选参数*/ int demo( char msg, ... ) &#123; /*定义保存函数参数的结构*/ va_list argp; int argno = 0; char para; /*argp指向传入的第一个可选参数，msg是最后一个确定的参数*/ va_start( argp, msg ); while (1) &#123; para = va_arg( argp, char); if ( strcmp( para, "") == 0 ) break; printf("Parameter #%d is: %s\n", argno, para); argno++; &#125; va_end( argp ); /*将argp置为NULL*/return 0; &#125;]]></content>
      <categories>
        <category>当时我所不知道的C语言</category>
      </categories>
      <tags>
        <tag>C语言</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[可变参数函数用法]]></title>
    <url>%2F2018%2F05%2F30%2F%E5%8F%AF%E5%8F%98%E5%8F%82%E6%95%B0%E5%87%BD%E6%95%B0%E7%94%A8%E6%B3%95%2F</url>
    <content type="text"><![CDATA[exampletypedef char* va_list;//用于声明一个指向参数列表的字符型指针变量void va_start(va_list ap,prev_param);//第一个参数为指向可变参数字符指针变量，第二个参数是可变参数的第一个参数，通常用于指定可变参数列表中参数的个数void va_arg(va_list ap,type);//第一个参数为指向可变参数字符指针变量，第二个参数是可变参数的数据类型void va_end(va_list ap);//将存放可变参数字符串的变量清空（赋值为NULL） 123456789101112131415161718int sum(int count,...)//计算和&#123; int sum = 0; int i; va_list ap; va_start(ap,count); for(i=0;i&lt;count;++i) &#123; sum+=va_arg(ap,int); &#125; va_end(ap); return sum;&#125;int main()&#123; printf("%d\r\n",sum(3,1,2,3));&#125;]]></content>
      <categories>
        <category>当时我所不知道的C语言</category>
      </categories>
      <tags>
        <tag>C语言</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于回调函数的理解]]></title>
    <url>%2F2018%2F05%2F26%2F%E5%85%B3%E4%BA%8E%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%E7%9A%84%E7%90%86%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[example实例中 populate_array 函数定义了三个参数，其中第三个参数是函数的指针，通过该函数来设置数组的值。 实例中我们定义了回调函数 getNextRandomValue，它返回一个随机值，它作为一个函数指针传递给 populate_array 函数。 populate_array 将调用 10 次回调函数，并将回调函数的返回值赋值给数组。 12345678910111213141516171819202122232425262728#include &lt;stdlib.h&gt; #include &lt;stdio.h&gt; // 回调函数 void populate_array(int *array, size_t arraySize, int (*getNextValue)(void)) &#123; for (size_t i=0; i&lt;arraySize; i++) array[i] = getNextValue(); &#125; // 获取随机值 int getNextRandomValue(void) &#123; return rand(); &#125; int main(void) &#123; int myarray[10];//此处getNextValue指向 getNextRandomValue函数的地址，起到调用作用 populate_array(myarray, 10, getNextRandomValue); for(int i = 0; i &lt; 10; i++) &#123; printf("%d ", myarray[i]); &#125; printf("\n"); return 0; &#125;]]></content>
      <categories>
        <category>当时我所不知道的C语言</category>
      </categories>
      <tags>
        <tag>C语言</tag>
      </tags>
  </entry>
</search>
